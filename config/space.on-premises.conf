ktor {
    deployment {
        environment = production
        port = 8084
        internalPort = 9084
        autoreload = false
        callGroupSize = 8
    }

    application {
        modules = [circlet.server.ServerKt.main]
    }
}

circlet {
    stackName = "On prem"
    type = "Docker"

    server {
        singleOrg = true
        features = [OnPremise]
        enabledFeatureFlags = [PROJECT_PARAMETERS_ANNOTATIONS, PROJECT_PARAMETERS_VAULT_INTEGRATION, GOTO_MENTIONS_NEW_MATCH_ALGORITHM, GOTO_SEARCH_PROFILES_FTS, FULL_TEXT_SEARCH_EXPERIMENTAL_UI, ADVANCED_SEARCH_EXPERIMENTAL_UI, ISSUE_CHAT_CONTENT, POSTPONED_CHANNEL_MESSAGES]
        enabledFeatureFlags += ${?EXTRA_FEATURE_FLAG}

        enableSqlTracing = false
        enableExternalApiTracing = false
        enableAutomationInternalsConfiguration = true
        enableActiveAppTracker = true
        dumpStacksOnExit = false
        httpApiTimeout = 60000
        dontFailOnLargeBatches = true
        rpcTimeout = 60000
        permissionCacheCalculationInterval = 2000
        dbCacheCalculationTimeoutMs = 60000
        pidFileName = ".main_app.pid"
        orgInitTimeout = 180000
        processMetricsEnabled = false
    }

    onprem {
        jetSalesURL = "https://account.jetbrains.com"
    }

    push {
        proxy {
            url = "https://on-premise.service.jetbrains.space"
        }
    }

    preload {
        defaultProviders = [PreloadSpaceFeedAdvertiser, PreloadGeneralChannel, PreloadAbsenceReasons, PreloadMainProject]

        preloadMainProject = true

        builtinAuthModule {
            enabled = true
        }
        admin {
            firstName = "admin"
            lastName = "admin"
            username = "admin"
            email = "admin@example.com"
            password = "admin"
        }
    }

    masterSecret = "w+5k7Y2ifranEsO1CTPrAUCXO/jOav0nZ3Qk+OcO2BU="

    db {
        type = "postgresql"
        schemaPrefix = "crclt_"
        host = "postgres"
        port = 5432
        port = ${?DB_PORT}
        username = "space"
        password = "spacepassword"

        postgresql {
            driver = "org.postgresql.Driver"
            url = "jdbc:postgresql://"${circlet.db.host}":"${circlet.db.port}"/spacedb"
        }

        pool {
            vendor = "hikari"

            maxActive = 96
            minIdle = 12
        }

        debug {
            similar_queries_count_threshold = 10
            all_queries_count_threshold = 100
        }
    }

    bus {
        engine = "redis"
        host = "redis://redis:6379"
        type = "single"
    }

    storage {
        aws {
            region = "eu-west-1"
            bucket = "space-local"
            endpoint = "http://minio:9000"
            accessKey = "space-access-key"
            secretKey = "space-secret-key"
        }

        elastic {
            enabled = true
            host = "elasticsearch"
            port = 9200
            reIndex = true
        }
    }

    audit {
        elastic {
            enabled = true
            host = "elasticsearch"
            port = 9200
        }
    }

    perf {
        client {
            enabled = false
        }
        elastic {
            enabled = false
        }

        riemann {
            enabled = false
        }

        prometheus {
            enabled = false
            jmx = false
        }
    }

    metrics {
        fus {
            enabled  = true
            config   = "https://resources.jetbrains.com/storage/fus/config/v4/SP/SPP.json"
            product  = "SPP"
        }
    }

    // Circlet as OAuth 2.0 authentication server
    oauth {
        rememberMe {
            // Remember me cookie TTL in seconds
            ttl {
                // If user checked remember me
                userLong = 2592000 // 30 * 24 * 60 * 60
                // If admin checked remember me
                adminLong = 604800 // 7 * 24 * 60 * 60
                // If user or admin unchecked remember me
                short = 3600 // 60 * 60
            }

            // Authentication session cache
            cache {
                protectedQueueSize = 100
                probationalQueueSize = 100
            }
        }

        accessToken {
            // Access token TTL in seconds
            ttl = 600 // do not use anything longer in production, potential security issue
            // List of client IDs with custom TTL for access_token
            ttlCustom {
                "circlet-ios-app" = 25h
                "circlet-android-app" = 25h
            }
            issuer = "https://jetbrains.com/circlet"
            // RSA512 key pair to sign JWT
            // Use circlet.platform.server.services.oauth.accessToken.AccessTokenKt.main to generate the pair
            rsa {
                // X.509 encoded public key
                public = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1t0tkWgYTWOPVuGAnVxVbcwMeQDfZZcWkKuBXRFy6B0Eanv2yjWFZExRBl/VNh1RpD1BVShGhQiq/EFAy7Q5VeI3VRwgCO++NbwH3h+81k0WCxuMZu7R7eFQF6XPrboVO/vqeP3XVQSl3gF3/hnH6ulqTVGZyJ3V4swgDgSOnYu+qhDb+YjemqbGocttr1dVvrOVXxoIxsg6w9yYg8+YPs6NKtKYiZreuphZjQSjcisG6qHwKxjKVWz+XaqfZzXRZhIEOmWGJNbUPW6rYMdwbk6wwpyaYzQ/+lvtpYnfl147VUjkcyo4Yxq7TiEjdKTlanaZ03Sp76BmW/fAsjnVl6pVFcGR52PhGkgQ/hZjsUi0MzW6Nbc3li3DqMnb/Nln2ynHiQmEvZsBwcp+CPnPrlM1ABvqC+PVRRse1ZM9cKoYj3z6i2lcloV791PjJoz1EpqhRKe3kA43A2pDyue8ZdUQ6bRfR9b+9WK1SFaXzkVm8pUkveP6Gty5bgAwEZXAOjeHD0juE9Cknh9VucHVpU6Mdp/bv5wekwpW39PfOn2z4rNz533piPHVJMRoaNheoEVl3TT43UIo91INqp0J/+3FS7dUsILTsYc6UELcS26Fkxxe5TZTUUElIC8WFPNq3ZILNKmzNVy2y0t/T1bQ/r+eXuliAMsTbKYcQAX1JOECAwEAAQ=="

                // PKCS#8 encoded private key
                private = "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"
            }
        }

        message {
            encoding {
                // an example of 128 bit key for AES.
                // openssl rand 16 | base64
                key = "mi36E8Jl7mX0SNlvFC+9Tg=="
            }
        }

        twoFactor {
            // an example of 128 bit key for AES.
            // openssl rand 16 | base64
            encryptionKey = "vtQuY3oqKtQ9qAMsZNN1fg=="
        }

        // 128 bit key for AES.
        encryptionKey = "z+nGEpeTCePXaz4GELbaPg=="

        // 2048-bit public/private key pair for signing/verifying outgoing messages to applications
        // Use circlet.test.framework.application.KeyGenUtilsKt.main to generate the pair
        messageSigning {
            rsa {
                // X.509 encoded public key
                public = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzx/1pyhSM7eFmr16i7NF0cvfqWmExH5RlSnnyF1dSqWtP28Fa1Fk+fMKEMw3whZ4OLccMIpG4I2Gu8F07wgTfJxQbTq1QHNnsrIxcLU+q339y4vRFks0NQvKbBM4Qm3xanHTk+5ezDR5Wpdhfq5mt8QIXNpohTQ8OEhRw91/TjtecnNDM+CKEL0G23M7LMzk8JjKODn/J0qG1+pNK1Ke6m+YmZVJ2k7w0x/vc/U3tQjz1Dh1u+zpLJE6zw2T7/C9FbTkwaJ/fTFRcLyLJXpXlOrA9aPX8q9uSA5J0o//Ny9HYx4oDzkKAUM+BI/m/fwpL0B/1SkvjDwXuoyKqOvmfBDas9ou6kI/pIF0UYY9+OGoenVWgv+dSSDUo52apJKZJZnD9DAHxJrEgrT2CJeI6N1LhpMgxjOlTaYzMIQfGd2gCdOIfrI8EuPaRh9WVQwmBR2tCsWa4hQuWvC8Cmcxl3r/5fv+NTRugkH9XdTvHZ+MAuydL7UP0eN5foXrR34TONxL4an0QqRWl5JME4oE0yWPhLpyQFU9HOgW+lXlfa2RVOqmP+phvr/gS0mOkC1P8J16eW42oq2tZD5G0ebBh7ozM9GWWztI7vOEE2BhkCiMV+Vd5MmW802ZQL/PSkoBiNGAsiiSTMix8YfpTxJK87gdlIxgekMBVhIKptGt3N8CAwEAAQ=="

                // PKCS#8 encoded private key
                private = "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"
            }
        }
    }

    limits {
        perOrg = {
            "totalMembers" = {
                softCap = 9000000
                hardCap = 10000000
            }
        }
        request {
            sessionTTL = 5000
            limits = [
                {
                    type = "bandwidth"
                    capacity = 1000
                    refill {
                        tokens = 400
                        duration = "1 second"
                    }
                },
                {
                    type = "bandwidth"
                    capacity = 10000
                    refill {
                        tokens = 10000
                        duration = "1 minute"
                    }
                }
            ]
        }
    }

#     license {
#         key = {{ .Values.space.license.key }}
#     }

    vcs {
        url = "http://vcs:8080"
        secret = "BDnmgHWZJrx3ArWar4WphvtAq96knUdC3rTAPK2m4mE="

        identity {
            name = "Space"
            email = "space@jetbrains.com"
            secretKey_base64 = ""
            passphrase = ""
        }
    }

    mail {
        outgoing {
            enabled = false

            // SMTP settings
            fromAddress = "space@space.example.com"
            host = "mail"
            port = 25
            protocol = "SMTP"
            login = "space"
            password = "space"
            messageQueuePrefix = "mailQueue"

            // handling properties
            aggregationDelaySecs = 900
            rateLimitPerSecond = 3
        }
    }

    endUserAgreement {
        jetBrains {
            enabled = false
        }
    }

    frontend {
        url = "http://localhost:8084"
        internalUrl = "http://space:9084"
        internalALB {
            enabled = false
        }

        // Alternative URLs for Space
        altUrls = [
            "http://127.0.0.1:8084",
            "https://localhost:8084",
            "https://space.local:8084",
            "http://43.200.255.11"
        ]

        enableWebdriverTestIds = false
    }

    healthcheck {
        username = "healthcheck"
        password = "healthcheck"
    }

    webhooks {
        key = "wCZricf1/fbRppgWwS0ECpzZgd18LsGg1+onoOpTWUE="
        // Possible options are "Java" and "Apache", unknown values fall back to Java.
        client = "Java"
    }

    unfurl {
        // Possible options are "Java" and "Apache", unknown values fall back to Apache.
        client = "Apache"
    }

    // external language server. This implementation implies syntax highlight only
    // `client` should be one of `net` or `local`
    language-server {
        client = local
        engine = Java
        host = langservice
        port = 8095
    }

    pipelines {
        dsl {
            compilation {
                image = "public.registry.jetbrains.space/p/space/containers/space-automation-dsl-compile:2023.2.0.128"
                storage {
                    aws {
                        region = "eu-west-1"
                        bucket = "automation-dsl-local"
                        endpoint = "http://minio:9000"
                        accessKey = "space-access-key"
                        secretKey = "space-secret-key"
                    }
                }
            }
            runtime {
                mavenRepo {
                    url = "https://maven.pkg.jetbrains.space/public/p/space/maven"
                }
            }
        }

        execution {
            type = "docker"
            backends = ["worker"]

            # TODO remove when space container is updated
            bootstrap {
                image = "671090787922.dkr.ecr.eu-west-1.amazonaws.com/automation/alpine/git:v2.30.2-jb"
            }

            worker {
                image = "public.registry.jetbrains.space/p/space/containers/space-automation-worker:2023.2.0.128"
                # workers won't be updated after installing new on-prem version
                initialVersion = "default"
                dockerBuilderImage = "public.registry.jetbrains.space/p/space/containers/space-automation-docker-builder:2023.2.0.128"
                dslCompileImage = "public.registry.jetbrains.space/p/space/containers/space-automation-dsl-compile:2023.2.0.128"
                extraNetworks = ["space-on-premises_backend-data"]
                extraHosts = ["host.docker.internal:host-gateway"]
            }

            terminateLongExecutions {
                maxPendingDuration = 6h
                maxScheduledDuration = 30m
            }

            fileshare {
                storage {
                    aws {
                        region = "eu-west-1"
                        bucket = "automation-fileshare-local"
                        endpoint = "http://minio:9000"
                        accessKey = "space-access-key"
                        secretKey = "space-secret-key"
                        s3Presigner {
                            endpoint = "http://minio:9000"
                        }
                    }
                }
            }
        }

        serviceMessages {
            storage {
                aws {
                    region = "eu-west-1"
                    bucket = "automation-logs-local"
                    endpoint = "http://minio:9000"
                    accessKey = "space-access-key"
                    secretKey = "space-secret-key"
                }
            }
        }

        blockstorage {
            engine = "local-docker"
        }
    }

    packages {
        internalUrl = "http://packages:9390"
        notifications {
            enabled = true
        }

        oauth {
            clientId = "space-to-packages-client"
            clientSecret = "BF4VMzFw7Nx+OXadk2/iYgeyQbTbcyFrLKHTSbtRL44="
        }

        types {
            maven {
                url = "http://localhost:8390"
            }

            nuget {
                url = "http://localhost:8390"
            }

            npm {
                url = "http://localhost:8390"
            }

            container {
                 url = "http://localhost:8390"
            }

            pypi {
                url = "http://localhost:8390"
            }

            composer {
                url = "http://localhost:8390"
            }

            dart {
                url = "http://localhost:8390"
            }

            files {
                url = "http://localhost:8390"
            }

            crates {
                url = "http://localhost:8390"
            }
        }
    }

    attachments {
        useCdn = false
    }
}
